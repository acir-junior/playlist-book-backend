name: Copilot PR Reviews
on: [pull_request]

jobs:
    analyze:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4

            - name: Set up Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: '22'
                  cache: 'npm'

            - name: Install dependencies
              run: npm ci

            - name: Run NestJS tests
              run: npm run test -- --watch=false --passWithNoTests

            - name: Run ESLint
              run: npm run lint -- --max-warnings=0

            - name: Core Business Rules Validation
              id: core_check
              run: |
                # Acomplamentos indevidos na pasta core
                CORE_VIOLATIONS=$(find src/core -type f \( -name "*.ts" -o -name "*.js" \) \
                -exec grep -lE "from ['\"]src/(application|domain|infra)|@Injectable|@Controller" {} + || true)

                if [ -n "$CORE_VIOLATIONS" ]; then
                    echo "::warning:: Poss√≠veis viola√ß√µes na camada core:"
                    echo "$CORE_VIOLATIONS"
                    echo "core_violations=true" >> $GITHUB_OUTPUT
                    echo "CORE_REPORT=$(echo -e '## üî¥ Viola√ß√µes de Arquitetura\n'$CORE_VIOLATIONS | jq -Rs .)" >> $GITHUB_OUTPUT
                else
                    echo "core_violations=false" >> $GITHUB_OUTPUT
                    echo "CORE_REPORT=$(echo -e '## ‚úÖ Nenhuma viola√ß√£o encontrada na camada core' | jq -Rs .)" >> $GITHUB_OUTPUT
                fi

            - name: Generate Full Report
              uses: actions/github-script@v6
              env:
                CORE_REPORT: ${{ steps.core_check.outputs.CORE_REPORT }}
              with:
                script: |
                  const { data: diff } = await github.rest.pulls.get({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      pull_number: context.payload.pull_request.number,
                      mediaType: { format: 'diff' },
                  });
                
                  const nestAnalysis = `
                    ## üîç An√°lise de C√≥digo
                    ${diff.includes('@Controller') ? '‚úÖ Novos Controllers encontrados' : '‚ùå Nenhum novo Controller encontrado'}
                    ${diff.includes('@Injectable') ? '‚úÖ Novos Servi√ßos encontrados' : '‚ùå Nenhum novo Servi√ßo encontrado'}
                    ${diff.includes('@Module') ? '‚úÖ Novos M√≥dulos encontrados' : '‚ùå Nenhum novo M√≥dulo encontrado'}
                  `;

                  const fullReport = `
                    ## üöÄ Relat√≥rio Completo
                    ${process.env.CORE_REPORT}
                    ${nestAnalysis}
                    ## üìà Estat√≠sticas
                    - ${diff.split('\n').length} linhas de c√≥digo alteradas
                    - ${(diff.match(/\+/g) || []).length} linhas adicionadas
                    - ${(diff.match(/\+/g) || []).length} linhas adicionadas
                    - ${(diff.match(/\-/g) || []).length} linhas removidas
                  `;

                  await github.rest.issues.createComment({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      issue_number: context.payload.pull_request.number,
                      body: fullReport,
                  });
              

            